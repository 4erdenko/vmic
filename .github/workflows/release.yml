name: Release (cargo-dist)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to rebuild/reupload"
        required: true

permissions:
  contents: write
  id-token: write

jobs:
  dist:
    if: ${{ github.event_name != 'release' || github.event.release.draft == false }}
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      RUSTC_WRAPPER: sccache
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.90
        with:
          targets: x86_64-unknown-linux-musl

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Set up sccache
        uses: Mozilla-Actions/sccache-action@v0.0.9

      - name: Install system dependencies (musl)
        run: sudo apt-get update && sudo apt-get install -y musl-tools jq

      - name: Determine release tag
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> "$GITHUB_ENV"
          else
            if [ -z "${{ github.event.inputs.tag }}" ]; then
              echo "Manual dispatch requires the 'tag' input" >&2
              exit 1
            fi
            echo "RELEASE_TAG=${{ github.event.inputs.tag }}" >> "$GITHUB_ENV"
          fi


      - name: Install cargo-dist
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist@0.30.0

      - name: Build release artifacts with cargo-dist
        run: |
          dist build \
            --artifacts=local \
            --tag "$RELEASE_TAG" \
            --target x86_64-unknown-linux-musl

      - name: Show artifacts
        run: ls -lah target/distrib

      - name: Upload artifacts to GitHub Release (from dist manifest)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          dist manifest --artifacts=local --tag "$RELEASE_TAG" --output-format=json \
            | jq -r '.upload_files[]' \
            | while IFS= read -r path; do
                if [ -f "$path" ]; then
                  gh release upload "$RELEASE_TAG" "$path" --clobber
                fi
              done
